===============================
Builtin functions and operators
===============================

All numbers are double precision. Illegal operations may produce NAN.

Literals
~~~~~~~~

•     true false (integer) (float) (string) vessel

'vessel' is the default sample to contain species that are not explicitly put in a sample.

Prefix number and bool operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

•     -  not

Infix number and bool operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

•      +  -  ·  /  ^  and  or  =  <>  <=  >=  <  > 
       (* can be used for ·)

Standard math precedence.

Infix species operators (eq, not eq)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

•      =  <>

Infix string operators (concat, eq, not eq)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

•      +  =  <>

Infix list operators (concat, eq, not eq)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

•      ++  =  <>

Initial environment
~~~~~~~~~~~~~~~~~~~
All of the following are normally-bound variables in the initial environment. They can be redefined, resulting in hiding the built-in functions. The last group are from the C# Math and Double classes.

•      pos(n)          // if n=NaN or n<0 then 0 else n end
•      int(n)          // the integer nearest n

•      pi              // 3.14159265358979323846
•      e               // 2.7182818284590452354
•      maxNumber
•      minNumber
•      positiveInfinity
•      negativeInfinity
•      NaN             // (NaN = NaN) = true

•      abs(n)
•      arccos(n)
•      arcsin(n)
•      arctan(n)
•      arctan2(n,m)
•      ceiling(n)
•      cos(n)
•      cosh(n)
•      exp(n)
•      floor(n)
•      log(n)          // base e
•      max(n)
•      min(n)
•      sign(n)
•      sin(n)
•      sinh(n)
•      sqrt(n)
•      tan(n)
•      tanh(n)

===================
String manipulation
===================

string concatenation

•      s1 + s2

length of a list

•      s()

indexing (from 0)

•      s(n)

substring (start,length)

•      s(n,m)

name of a species

•      basename(s)  
       // The string that is the un-alpha-converted name of species s. 
       // Useful to create species names as combinations of names of other species that may be function parameters. 
       // Use the "s as <Expression>" notation on species definition to assign a custom basename to s.
       // Species names, including synthesized ones, will be alphaconverted as needed, so basename cannot produce name clashes.

=================
List manipulation
=================

list definition

•      list v = ..

list parameter in a function

•      function f(list v, ..){..}

fixed length list

•      [e1,..,en]

list concatenation

•      l1 ++ l2

length of a list

•      l()

indexing (from 0)

•      l(n)

sublist (start,length)

•      l(n,m)

fixed length pattern matching; ti can be 'number', 'list', etc.

•      [t1 v1, .., tn vn] = e

variable length pattern matching     

•      [..ti vi..] ++ list v = e
•      list v ++ [..ti vi..] = e
   
Examples: constructors/destructors
     list l = [0] ++ [1,2]      // = [0,1,2]
     number first = l(0)        // = 0
     list late = l(1, l()-1)    // = [1,2]
     list early = l(0, l()-1)   // = [0,1]
     number last = l(l()-1)     // = 2

Examples: deconstructing a list l by pattern matching
     [number n0 n1 n2] = l
     [number first] ++ list late = l
     list early ++ [number last] = l

pattern matching in fuctions parameters
     function f([number n]++list l) {l++[n]}
     list r = f([0,1,2])         // = [1,2,0]

Examples: generators
     draw 3 from λ(number i){i}  // = [0,1,2]

Iterators - these will not stack overflow

•     draw n from f : (number,number->a)->[a]

•     map(f,l) : ((a->b),[a])->[b]

•     filter(f,l) : ((a->bool),[a])->[a]

•     foldl(f,z,l) : (((b,a)->b),b,[a])->b

•     foldr(f,z,l) : (((a,b)->b),b,[a])->b

•     sort(lesseq,l): ((a,a)->bool,[a])->[a]

•     reverse(l): [a] -> [a]

•     transpose(l) : [[a]]->[[a]]

•     each(n,l) : (((a)->.),[a])->.

'each' is a statement that takes a network and a list as arguments and executes the network over each of the list's elements without returning a value

Note that map can be defined from draw-from:
     map(f,l) = draw l() from {λ(i) f(l(i))}}
and that can be easily modified to pass the iteration index to the function f.

Draw-from creates a list by calling a function n times (0..n-1).
It has several other uses as well:

Draw-from expressions: (they return a value)

•     draw n from F

for F a function (or a list of them), returns (a list of) a list of the function(s) results over the inputs 0..n-1

•     draw n from R

for R a random variable (or a list of them) returns (a list of) a list of n samples from the random variable(s)

Draw-from statements: (they do not return a value)

•     draw n from F

for F a function or a list of them, makes a plot of the functions over inputs 0..n-1
the functions can each return a single number or a list of n numbers (producing n plot lines)

•     draw n from R 

for R a random variable or a list of them, makes a density plot of the random variables
the random variables can each produce a number or a list of numbers (i.e. they can be multivariate random variables)

•     draw n from N

for N a network or a list of them, executes the network(s) over inputs 0..n-1

================
Random Variables
================

•     rand(omega w) { ... w(0) ... w(1) ... }

This is an expression denoting a random variable (a function from a sample space to some type) that accesses the sample space w of type omega. Each w(i) is an orthogonal [0..1) dimension of the sample space yielding a uniform random number. Separate random variables access separate subdimensions but w(i) is always the same number for the same random variable and the same w. (See the Omega language.)
      rand(omega w) { w(0) } 
This is a pure [0..1) random number generator.

•     random X = ...

Declares a variable X of type random variable and expects a random variable to bind to it. Also, "random" can be used as a parameter type:
     function f(random X) { ... }

•     random X(omega w) {...}

This is a declaration of a random variable named X, on sample space w, equivalent to:
     random X = rand(omega w) {...}

•     <-X 

Samples a random variable X (it creates a fresh sample space and passes it to the random variable).

•     X(w) 

Samples a random variable X from a particular sample space w, e.g.:
     function gtzero(random X) { rand(omega w) { X(w)>0 } }
returns a boolean random variable. Also:
     function lift(function f)(random X) { rand(omega w) { f(X(w)) } }
lifts a function f to a random variable.

•     X | Y

A random variable which is X conditioned on Y = true, where Y is a boolean random variable. E.g.:
     X | gtzero(X)
when sampled, this returns only elements of X that satisfy gtzero(X), i.e. the positive ones. This works by rejection sampling, hence not very efficienty in general, and sampling will loop if the condition never holds.

•     draw n from X
•     draw n from [X1,...,Xn]

Statements that draw a number of samples from a random variable or a list of random variables and show a density plot of their distributions. When used as expressions, these return the lists of numbers instead of plotting them

•     parameter n <- X

Declares a number n and assigns to it a random number drawn from random variable X. 
Hence it is equivalent to:
     number n = <-X
but in addition, these declared numerical parameters can be manipulated in the GUI.

=============
Distributions
=============

Via the above random variables, distributions are programmable, e.g.:

     function uniform(number a b) {
        rand(omega w) { w(0)·(b-a)+a }
     }

uniform(3,5) returns a random variable with a uniform distribution between 3 and 5. Although all distributions are programmable, the following distributions are built-in:

•      uniform(lo,hi), 
•      normal(mean,stdev)             // Gauss
•      parabolic(mean,halfwidth)      // Epanechnikov
•      exponential(lambda)
•      bernoulli(p)                   // true with probability p, or false

Each instance of e.g. uniform(lo,hi) is independent, even when used in a context like
     rand(omega w) ... uniform(lo,hi)(w) ...
because uniform will sample from a subspace of w independent from anybody else's.

===========
Observation 
===========
(see Flow-expressions)

•    observe(f)             

same as observe(f,vessel)

•    observe(f,s)

observe a flow f in sample s returning a number; e.g.:

     observe(kelvin,s)       // temperature of s
     observe(volume,s)       // volume of s (L)
     observe(a,s)            // molarity of a in s (mol/L)
     observe(∂a,s)           // derivative of a
     observe(a+2b^2,s)       // combined observations
     observe(var(a),s)       // requires LNA active
     observe(time,s)         // nonzero only if s was the *input* sample of equilibrate s'=s for t: it returns the end time of equilibrate

================
Flow-expressions
================

Flow-expressions denote time courses and are found in 'observe( ... , S)' for samples, in 'report ...' statements for plotting, and in {{ ... }} special rate brackets to express arbitrary kinetic functions. Flow-expressions are a subset of expressions that include boolean and numerical operators and where species 's' are intepreted as molarity(s)(t): the numeric value of the concentration of 's' at time 't'. Flow expressions have type "flow".

•     time

Current time.

•     kelvin
•     celsius

Current temperature.

•     ∂ a           // differentiation (first time derivative). The argument a is not formally expanded, and the value is numerically computed from the known ∂x of the species x occurring in a. It will appear as ∂a in a legend.
•     sdiff(a)      // symbolic differentiation. The argument a is formally expanded, e.g., sdiff(x^2) is replaced by 2·x·∂x for a species x. It will appear as 2·x·∂x, not as sdiff(x^2), in a legend.

Derivatives, valid in 'report' but not in {{...}} rates.

•     poisson(a)    

Noise with mean = mean(a) and variance = mean(a).

•     gauss(a,b)  

Noise with mean = mean(a) and variance = mean(b).

•     var(a)

Variance of a linear combination of species.


•     cov(a,b)

Covariance of two linear combianations of species.

•     cond(a,b,c)

Conditional flow, e.g. cond(a<b,a,b) = min(a,b).

More technically, flow-expressions are first *evaluated* to produce *flows* (while ordinary expressions are evaluated to produce *values*). Flows are data structures consisting exclusively of numeric and boolean operators over booleans, numbers, species, and some special entities such as 'time'. The  process of producing flows can involve ordinary function invocation and if-then-else conditional execution, but those do not appear in resulting flows. 
At a  later stage, flows are *observed*, that is evaluated at multiple time points, during plotting or in the evaluation of reaction rates during simulations. Flows  are exactly the labels that appear in chart legends.
Flows have the same syntax as expression; the evaluationof expressions to flows or to values is context-dependent.

Ex.: Arrhenius equation (temperature-dependante rates):

     function Arrhenius(flow cf ae) { 
        cf·exp(-ae/(8.3144598·kelvin)) 
     }

Use the Arrhenius function for the rate of a reaction:

     species a,b @ 1M
     a + b -> Ø  {{ Arrhenius(2,50)·a·b }}

Plot a, b, and the instantanous rate of their reaction over time:

     report a, b, Arrhenius(2,50)·a·b     
     equilibrate for 10                        

Difference between 'if' and 'cond' flows:

     species a @ 1M
     species b @ 0M
     a -> Ø
     Ø -> b

min is a built-in flow operator, it plots min(molarity(a)(t), molarity(b)(t)) at any time t:

     report min(a,b) 

here is the equivalent conditional flow:

     report cond(a<b,a,b)

Unlike 'cond', 'if' is not a flow operator, so it cannot compare flows:

     report if a<b then a else b end      // ERROR   

but 'if' can choose between two flows a or b based on a (timeless) condition:

     report if 3>2 then a else b end    

====================
Mass Action Compiler
====================

Produces equivalent mass action CRNs out of a broad class of non-mass action CRNs.

•     massaction(S)         // where S is a sample, returning another sample

S can be any sample whose reactions have elementary function kinetics (i.e. reactions with reaction rates of the kind {r} (mass action kinetics) or {{f}} (general kinetics) where f can contain linear arithmetic, powers, fractions, exp, log, sin, cos, etc.)
The result is a new sample S' with new species and new reactions with mass action kinetics. 
The new species of S' are either renamed copies x⁰ of the species x in S, or come in pairs x⁺, x⁻ for species x in S, or are additional species. 
The trajectories of x⁰ in S' are the same as the trajectories of the corresponding x in S, and the trajectories of the differences (x⁺ - x⁻) are the same as the trajectories of the corresponding x.
The reactions in S' all have simple mass action kinetics (their ODEs are polynomials); the elementary functions from S typically show up only in computing the initial conditions of the variables of S'.

Typical usage:

    sample S
    species x,y @ 1 M in S
    x -> y {{x/(x+1)}}

    sample S' = massaction(S)

    equilibrate S for 10     // run a simulation of the reference system S
    equilibrate S' for 10    // followed by a simulation of S', for comparison

The generated system S' is listed, e.g., in the "Show initial CRN" selection of the Computed Output menu.

    x⁰ = 1 M, 
    y⁰ = 1 M, 
    xˍ₁⁰ = 500 mM, 
    yˍ₁⁰ = 500 mM, 

    xˍ₁⁰ + x⁰ -> xˍ₁⁰ 
    x⁰ + yˍ₁⁰ -> x⁰ + yˍ₁⁰ + y⁰ 
    3xˍ₁⁰ + x⁰ -> 4xˍ₁⁰ + x⁰ 
    2yˍ₁⁰ + xˍ₁⁰ + x⁰ -> 3yˍ₁⁰ + xˍ₁⁰ + x⁰ 

To note that mass action kinetics can be further reduced to bimolecular mass action kinetics (but this is not done here).

Incidentally, the mass action compiler implicitly handles also "generalized" mass action kinetics, provided that stoichiometric coefficients a,b,c are rational numbers:  
    a·x + b·y ->{r} c·z  (which gives an error if a,b,c are not integers) 
can be written as  
    x + y -> y + z {{r·a·x^a·y^b}}
    x + y -> x + z {{r·b·x^a·y^b}}
    x + y + z -> x + y {{r·(a+b-c)·x^a·y^b}}
yielding the odes expected of the reaction above.
Those 3 reactions can be given to the mass action compiler, which will generate (a large) number of pure mass action reaction.


Symbolic compilation.
Within S, constants can be used instead of numerical values for rates and initial conditions. Constants represent unknown numerical values, and are declared by, e.g.:

    constant k,k1,k2,k3

These can be used in place of numbers, e.g. {{k·x/(x+1)}}; they are handled symbolically by massaction(S), and are reflected in S'. With some caveats:
- constants are assumed to be nonnegative, and massaction(S) may fail if some expressions (e.g. log(k)) cannot be determined to be nonnegative.
- in particular {{x^k}} will not work, because polynomizing it requires computing k-1.
- simulations cannot be carried out when rates or initial conditions involve constants, but S' will be generated nonetheless.

============
Optimization
============

•     argmin(f, i, d)         // BFGS Optimizer

where f: list -> [number, list]
input to f is a list of numbers (the parameters to optimize); output is a pair of the cost of the input parameters, and a list of partial gradients for the parameters used by BFGS to select the next sample for f

where i: list of numbers
initial guess for the parameters

where d: number
numeric tolerance for convergence, e.g. 1e-2

If a gradient is a time derivative (of concentrations) it is possible to use the ∂ operator to obtain it. Otherwise one may try to compute a local gradient by multiple samples. See the "PIDController Optimization" example.
