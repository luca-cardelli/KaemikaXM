============================================================
GOLD Parser Builder
Version 5.2.0.
============================================================


========================================
Grammar
========================================

"Name"    = Kaemika grammar
"Author"  = Luca Cardelli
"Version" = 1
"About"   = A Language for Modularizing Chemistry
          
"Case Sensitive" = True
"Start Symbol"   = <Top>

Id        = ({Letter}|{Greek and Coptic})({AlphaNumeric}|{Greek and Coptic}|'_'|{Superscripts and Subscripts}|'')*           ! Letter followed by alphanumerics or single-quote, underscore, Unicode sup/sub
Integer   = {Digit}+
Float     = {Digit}+ '.' {Digit}+
Double    = {Digit}+ ('.' {Digit}+)? [Ee] [+-]? {Digit}+
{StringChar} = {All Printable} - ["\]
QuotedString = '"' ({StringChar} | '\'{All Printable})* '"'
          
Comment Line  = '//'
Comment Start = '/*'
Comment End   = '*/'
Comment Block @= { Nesting = All }
                
! PREAMBLE --------------------------------------------

<Top>           ::=  <Statements>
             
! ABSTRACTIONS  --------------------------------------------
                          
<Function>       ::= Id '=' <Expression>                                     ! binding a function value to a function id
                    | Id <Fun>                                               ! function id definition
<Fun>            ::= <Headers> '{' <Expression> '}'                          ! function abstraction

<Network>        ::= Id '=' <Expression>                                     ! binding a network value to a network id
                    | Id <Net>                                               ! network id definition
<Net>            ::= <Header> '{' <Statements> '}'                           ! network abstraction (networks are nothing but functions that do not return values)

<Random>         ::= Id '=' <Expression>                                     ! binding a random variable value to a random variabl id
                    | Id <Rand>                                              ! random variable id definition
<Rand>           ::= '(' 'omega' Id ')' '{' <Expression> '}'                 ! random variable abstraction
                  
<EmptySample>    ::= Id '{' <Expression> <Volume> ',' <Expression> <Temperature> '}'
<Sample>         ::= Id '=' <Expression>                                     ! binding a sample value to a sample id
                    | <EmptySample>                                          ! empty sample definition, parameterized by volume and temperature
                    | Id                                                     ! empty sample definition, default volume (1 mL) and temperature (20 Celsius)

<Species>        ::= Id '=' <Expression>                                     ! binding a species value to a species id
                    | '{' <Substances> '}'                                   ! declaration of multiple species (unallocated)
                    | <Substances> '@' <Expression> <Quantity> <Allocation>  ! allocation of multiple <Ids> species to a sample, 
                                                                             !     short for '{'<Substances>'}' ';' 'amount' <Ids> '@' <Expression> <Quantity> <Allocation>

<Headers>        ::= <Headers> <Header>
                    | <Header>
                                      
<Header>         ::= '(' <Params> ')'

<Params>           ::= <ParamSeq>
                    |                                                  
<ParamSeq>         ::= <ParamSeq> ',' <Param>
                    | <Param>

<Param>          ::= 'bool' <Ids>                  ! booleans      
                    | 'number' <Ids>               ! numbers
                    | 'string' <Ids>               ! strings
                    | 'list' <Ids>                 ! lists
                    | 'flow' <Ids>                 ! flows                   
                    | 'species' <Ids>              ! species are values. n.b. individual reactions are not values, but networks are
                    | 'sample' <Ids>               ! samples are containers that have volume and temperature, populated with species that have concentrations
                    | 'function' <Ids>             ! functions can receive and return values, species, functions, and networks  
                    | 'network' <Ids>              ! networks can receive values, species, functions, and networks, and return nothing    
                    | 'random' <Ids>               ! random variables    
                    | 'value' <Ids>                ! untyped variables    
                    | <Ids>                        ! same as: 'value' <Ids>
                    | <Pattern>                    ! list pattern matching 

<Pattern>       ::= '[' <Params> ']'                  ! a fixed length list pattern
                    | '[' <Params> ']' '++' 'list' Id  ! a variable length list pattern, with tail on the right
                    | 'list' Id '++' '[' <Params> ']'  ! a variable length list pattern, with tail on the left

<Ids>           ::= <Ids> Id
                    | Id
                    
<IdSeq>         ::= <IdSeq> ',' Id
                    | Id
                                                              
<Allocation>     ::= 'in' <Expression>     ! allocation of species or reports to a sample
                    |                      ! short for 'in' 'vessel'
<Substances>     ::= <Substances> ',' <Substance>
                    | <Substance>
<Substance>      ::= Id '#' <Expression>
                    | Id
                  
! STATEMENTS --------------------------------------------

<Statements>    ::= <Statements> <Statement>  
                    |

<Statement>     ::=   <Net Instance>                          ! there are no obligatory delimiter characters between statements. LALR FTW!
                    | <Reaction>                              ! reactions are the only statements not prefixed by a keyword (other than instances)
                    | 'bool' Id '=' <Expression>              ! binding a bool value to a bool id
                    | 'number' Id '=' <Expression>            ! binding a number value to a number id
                    | 'string' Id '=' <Expression>            ! binding a string value to a string id
                    | 'list' Id '=' <Expression>              ! binding a list value to a list id
                    | 'flow' Id '=' <Expression>              ! binding a flow value to a flow id
                    | 'random' <Random>                       ! binding a random variable value to a random variable id
                    | 'constant' <IdSeq>                      ! an undetermined constant (used for exporting ODEs containing symbolic constants)
                    | 'parameter' Id '<-' <Expression>        ! drawing a parameter from a random variable (and displaying it in the GUI)
                    | 'species' <Species>                     ! binding a species to a species id or species def
                    | 'sample' <Sample>                       ! binding a sample to a sample id or sample def
                    | 'function' <Function>                   ! binding a function to a function id or function def
                    | 'network' <Network>                     ! binding a network to a network id or network def
                    | 'value' Id '=' <Expression>             ! binding any value to an id (useful in polymorphic functions)
                    | <Pattern> '=' <Expression>              ! binding list elements to ids; length and types must match                  
                    | 'amount' <Ids> '@' <Expression> <Quantity> <Allocation>  ! set initial quantity of species in a sample
                    | 'report' <Reports> <Allocation>                          ! report species for plotting (can use arithmetic, but restrictions apply)
                    | 'if' <Expression> 'then' <Statements> <Else>             ! conditional
                    | <Draw>                                                   ! draw samples from (lists of) functions or random variables and plot them
                    | ';'                                                      ! rarely used optional syntactic noise for same-line multiple statements
                    
                    | 'mix' Id '=' <ExpressionSeq>                                ! mix samples and name the new sample
                    | 'split' <IdSeq> '=' <Expression> 'by' <ExpressionSeq>       ! split a sample by propotions and name them
                    | 'split' <IdSeq> '=' <Expression>                            ! split in equal parts
                    | 'dispose' <ExpressionSeq>                                   ! dispose samples (those samples cannot be reused)
                    | 'regulate' <IdSeq> '=' <ExpressionSeq> 'to' <Expression> <Temperature>  ! change samples temperature to value (heat or cool)
                    | 'regulate' <IdSeq> 'to' <Expression> <Temperature>                      ! short for 'regulate' Ids '=' Ids 'to' ...
                    | 'concentrate' <IdSeq> '=' <ExpressionSeq> 'to' <Expression> <Volume>    ! change samples volume to value (evaporate or dilute)
                    | 'concentrate' <IdSeq> 'to' <Expression> <Volume>                        ! short for 'concentrate' Ids '=' Ids 'to' ...
                    | 'equilibrate' <IdSeq> '=' <ExpressionSeq> <EndCondition>    ! integrate samples for a time, and name the new samples
                    | 'equilibrate' <IdSeq> <EndCondition>                        ! short for 'equilibrate' Ids '=' Ids <EndCondition> (reusing the sample Ids)
                    | 'equilibrate' <EndCondition>                                ! short for 'equilibrate' 'vessel' '=' 'vessel' <EndCondition> (default sample)
                
<Net Instance>   ::= Id '(' <Expressions> ')'

<Else>           ::=  'elseif' <Expression> 'then' <Statements> <Else>  ! cascading if statements: else is optional
                    | 'else' <Statements> 'end'
                    | 'end'

<Draw>          ::= 'draw' <Expression> 'from' <Expression>
                                   
! REACTIONS --------------------------------------------

<Reaction>      ::= <Transition> 
                    | <Complex> '>>' <Transition>                 ! optional catalysis notation, A >> B -> C == A + B -> A + C, etc.
               
<Transition>    ::= <Complex> '->' <Complex>                                              ! default rate (collision frequncy = 1.0, activation energy = 0.0)
                    | <Complex> '->' '{' <Rate> '}' <Complex>                             ! rate in the middle of reaction
                    | <Complex> '->' <Complex> '{' <Rate> '}'                             ! or rate after reaction
                    | <Complex> '<->' <Complex>                                           ! reversible, default rate (= 1.0, 0.0)
                    | <Complex> '{' <Rate> '}' '<->' '{' <Rate> '}' <Complex>             ! rate in the middle of reaction
                    | <Complex> '<->' <Complex> '{' <Rate> '}' '{' <Rate> '}'             ! or rate after reaction, {reverse} then {direct}

<Rate>          ::= <Expression>                                                          ! collision frequency (with activation energy = 0.0)
                    | <Expression> ',' <Expression>                                       ! collision frequency, activation energy (joules per mole)
                    | '{' <Expression> '}'                                                ! arbitrary kinetic law: any function from a sample to a non-negative number

<Complex>       ::= <Complex> '+' <Simplex>
                    | <Simplex>
                
<Simplex>       ::= Integer Id                                          ! stoichiometry: '2a' is the same as 'a + a'
                    | Id '*' Id                                         ! stoichiometry: 'n * a' is the same as 'a + ... + a' n times for integer n>=0
                    | Id                                                ! a species
                    | '#' | 'Ø'                                         ! zero species: for creation and degradation
 
! EXPRESSIONS --------------------------------------------
          
<Expression>    ::=  <Op Exp>                                               ! see below
                 
<Base Exp>      ::= <Fun Instance> 
                    | 'true' | 'false'                                      ! bool literal
                    | Integer | Float | Double                              ! double floating point literal. use int(n) to round to integers
                    | QuotedString                                          ! double-quoted string literal. use \" and \\ to represent " and \
                    | 'if' <Expression> 'then' <Expression> <Else Exp>      ! no statements allowed inside if-expressions: uses if-statements for that
                    | 'fun' <Fun> | 'λ' <Fun>                               ! function abstraction
                    | 'net' <Net> | 'η' <Net>                               ! network abstraction
                    | 'rand' <Rand>                                         ! random variable abstraction
                    | '(' <Expression> ')'                                  ! parenthesized expression
                    | '[' <Expressions> ']'                                 ! list
                    | <Draw>                                                ! draw a list from (lists of) functions or random variables
                    | 'define' <Statements> 'yield' <Expression>            ! numerous but mild shift-reduce conflicts because no 'end' bracket. 
                                                                            ! E.g. (define number n = 3 yield n) + 3   vs. define number n = 3 return (n + 3)
                                                                            ! resolved as the latter
                  
<Fun Instance>      ::= Id                                                  ! built-in math library operators, and pi and e, follow this syntax too
                    | <Fun Instance> '(' <Expressions> ')'                  ! function invocations can use currying             
                     
<Else Exp>       ::=  'elseif' <Expression> 'then' <Expression> <Else Exp>  ! cascading if expressions: else is compulsory
                    | 'else' <Expression> 'end'
                           
<Expressions>    ::= <ExpressionSeq>
                    |
<ExpressionSeq>  ::= <ExpressionSeq> ',' <Expression>
                    | <Expression>
                                        
<Reports>        ::= <Reports> ',' <Report>
                    | <Report>
                    
<Report>         ::=  Id '=' <Expression> 'as' <Expression> 
                    | Id '=' <Expression>                                    ! bind a flow-valued timecourse from this report to Id
                    | <Expression> 'as' <Expression>                         ! use the string after 'as' in legends as the name of this report
                    | <Expression>                                           ! a flow to plot

<EndCondition>   ::= 'for' <Expression>
                  
! OPERATORS  --------------------------------------------                                 

<Op Exp>        ::= <Op Exp> '|' <Or Exp>                                 ! boring encoding of prefix/infix operator precedence  
                    | <Or Exp>

<Or Exp>        ::=  <Or Exp> 'or' <And Exp>       
                    | <And Exp> 

<And Exp>       ::=  <And Exp> 'and' <Not Exp>                                          
                    | <Not Exp>                                          

<Not Exp>       ::= 'not' <Comp Exp>                                          
                    | <Comp Exp>  

<Comp Exp>      ::= <Sum Exp> '=' <Sum Exp>
                    | <Sum Exp> '<>' <Sum Exp>
                    | <Sum Exp> '<=' <Sum Exp>
                    | <Sum Exp> '>=' <Sum Exp>
                    | <Sum Exp> '<' <Sum Exp>
                    | <Sum Exp> '>' <Sum Exp>
                    | <Sum Exp>

<Sum Exp>       ::= <Sum Exp> '+' <Mult Exp>
                    | <Sum Exp> '-' <Mult Exp>                                          
                    | <Mult Exp> 

<Mult Exp>      ::= <Mult Exp> '*' <Neg Exp> 
                    | <Mult Exp> '/' <Neg Exp>                                           
                    | <Neg Exp> 

<Neg Exp>       ::= '-' <Conc Exp> 
                    | '∂' <Conc Exp>
                    | '<-' <Conc Exp>
                    | <Conc Exp>
                    
<Conc Exp>      ::= <Conc Exp> '++' <Powr Exp>
                    | <Powr Exp>
                    
<Powr Exp>      ::= <Powr Exp> '^' <Base Exp>                               ! -2^2 = -4;  -2^-2 is error, use -2^(-2)
                    | <Base Exp>

! UNITS  --------------------------------------------                                 

<Volume>        ::= Id     ! 'L' | 'mL' | 'uL' | 'μL' | 'nL'  | 'pL' | 'ml' | 'ul' | 'μl' | 'nl' | 'pl'
<Temperature>   ::= Id     ! 'K' | 'Kelvin' | 'C' | 'Celsius'
<Quantity>      ::= Id     ! 'kg' | 'g' | 'mg' | 'ug' | 'μg' | 'ng' | 'pg' | 'kM' | 'M' | 'mM' | 'uM' | 'μM' | 'nM' | 'pM' | 'kmol' | 'mol' | 'mmol' | 'umol' | 'μmol' | 'nmol' | 'pmol'



========================================
Grammar Properties
========================================

Name                Kaemika grammar
Author              Luca Cardelli
Version             1
About               A Language for Modularizing Chemistry
Case Sensitive      True
Start Symbol        Top
Auto Whitespace     True
Character Mapping   Windows-1252
Character Set       Unicode
Generated By        GOLD Parser Builder 5.2.0.
Generated Date      2020-03-04 15:40


========================================
Defined Sets
========================================

{StringChar}     &20, &21, &23 .. &5B, &5D .. &80, &82 .. &8C, &8E, &91 .. &9C, &9E .. &200A, &2010 .. &2027, &202F .. &205F, &2065 .. &2069, &2070 .. &D7FF, &E000 .. &FEFE, &FF00 .. &FFEF


========================================
Lexical Groups
========================================

0    Comment Line
1    Comment Block




========================================
Terminals
========================================

 0      (EOF)
 1      (Error)
 2      Comment
 3      NewLine
 4      Whitespace
 5      '*/'
 6      '/*'
 7      '//'
 8      '-'
 9      '#'
 10     '('
 11     ')'
 12     '*'
 13     ','
 14     '/'
 15     ';'
 16     '@'
 17     '['
 18     ']'
 19     '^'
 20     '{'
 21     '|'
 22     '}'
 23     '+'
 24     '++'
 25     '<'
 26     '<-'
 27     '<='
 28     '<>'
 29     '<->'
 30     '='
 31     '>'
 32     '->'
 33     '>='
 34     '>>'
 35     '∂'
 36     amount
 37     and
 38     as
 39     bool
 40     by
 41     concentrate
 42     constant
 43     define
 44     dispose
 45     Double
 46     draw
 47     else
 48     elseif
 49     end
 50     equilibrate
 51     false
 52     Float
 53     flow
 54     for
 55     from
 56     fun
 57     function
 58     Id
 59     if
 60     in
 61     Integer
 62     list
 63     mix
 64     net
 65     network
 66     not
 67     number
 68     Ø
 69     omega
 70     or
 71     parameter
 72     QuotedString
 73     rand
 74     random
 75     regulate
 76     report
 77     sample
 78     species
 79     split
 80     string
 81     then
 82     to
 83     true
 84     value
 85     yield
 86     η
 87     λ


========================================
Nonterminals
========================================

88      <Allocation>
89      <And Exp>
90      <Base Exp>
91      <Comp Exp>
92      <Complex>
93      <Conc Exp>
94      <Draw>
95      <Else>
96      <Else Exp>
97      <EmptySample>
98      <EndCondition>
99      <Expression>
100     <Expressions>
101     <ExpressionSeq>
102     <Fun>
103     <Fun Instance>
104     <Function>
105     <Header>
106     <Headers>
107     <Ids>
108     <IdSeq>
109     <Mult Exp>
110     <Neg Exp>
111     <Net>
112     <Net Instance>
113     <Network>
114     <Not Exp>
115     <Op Exp>
116     <Or Exp>
117     <Param>
118     <Params>
119     <ParamSeq>
120     <Pattern>
121     <Powr Exp>
122     <Quantity>
123     <Rand>
124     <Random>
125     <Rate>
126     <Reaction>
127     <Report>
128     <Reports>
129     <Sample>
130     <Simplex>
131     <Species>
132     <Statement>
133     <Statements>
134     <Substance>
135     <Substances>
136     <Sum Exp>
137     <Temperature>
138     <Top>
139     <Transition>
140     <Volume>


========================================
Rules
========================================

0       <Top> ::= <Statements>
1       <Function> ::= Id '=' <Expression>
2       <Function> ::= Id <Fun>
3       <Fun> ::= <Headers> '{' <Expression> '}'
4       <Network> ::= Id '=' <Expression>
5       <Network> ::= Id <Net>
6       <Net> ::= <Header> '{' <Statements> '}'
7       <Random> ::= Id '=' <Expression>
8       <Random> ::= Id <Rand>
9       <Rand> ::= '(' omega Id ')' '{' <Expression> '}'
10      <EmptySample> ::= Id '{' <Expression> <Volume> ',' <Expression> <Temperature> '}'
11      <Sample> ::= Id '=' <Expression>
12      <Sample> ::= <EmptySample>
13      <Sample> ::= Id
14      <Species> ::= Id '=' <Expression>
15      <Species> ::= '{' <Substances> '}'
16      <Species> ::= <Substances> '@' <Expression> <Quantity> <Allocation>
17      <Headers> ::= <Headers> <Header>
18      <Headers> ::= <Header>
19      <Header> ::= '(' <Params> ')'
20      <Params> ::= <ParamSeq>
21      <Params> ::= 
22      <ParamSeq> ::= <ParamSeq> ',' <Param>
23      <ParamSeq> ::= <Param>
24      <Param> ::= bool <Ids>
25      <Param> ::= number <Ids>
26      <Param> ::= string <Ids>
27      <Param> ::= list <Ids>
28      <Param> ::= flow <Ids>
29      <Param> ::= species <Ids>
30      <Param> ::= sample <Ids>
31      <Param> ::= function <Ids>
32      <Param> ::= network <Ids>
33      <Param> ::= random <Ids>
34      <Param> ::= value <Ids>
35      <Param> ::= <Ids>
36      <Param> ::= <Pattern>
37      <Pattern> ::= '[' <Params> ']'
38      <Pattern> ::= '[' <Params> ']' '++' list Id
39      <Pattern> ::= list Id '++' '[' <Params> ']'
40      <Ids> ::= <Ids> Id
41      <Ids> ::= Id
42      <IdSeq> ::= <IdSeq> ',' Id
43      <IdSeq> ::= Id
44      <Allocation> ::= in <Expression>
45      <Allocation> ::= 
46      <Substances> ::= <Substances> ',' <Substance>
47      <Substances> ::= <Substance>
48      <Substance> ::= Id '#' <Expression>
49      <Substance> ::= Id
50      <Statements> ::= <Statements> <Statement>
51      <Statements> ::= 
52      <Statement> ::= <Net Instance>
53      <Statement> ::= <Reaction>
54      <Statement> ::= bool Id '=' <Expression>
55      <Statement> ::= number Id '=' <Expression>
56      <Statement> ::= string Id '=' <Expression>
57      <Statement> ::= list Id '=' <Expression>
58      <Statement> ::= flow Id '=' <Expression>
59      <Statement> ::= random <Random>
60      <Statement> ::= constant <IdSeq>
61      <Statement> ::= parameter Id '<-' <Expression>
62      <Statement> ::= species <Species>
63      <Statement> ::= sample <Sample>
64      <Statement> ::= function <Function>
65      <Statement> ::= network <Network>
66      <Statement> ::= value Id '=' <Expression>
67      <Statement> ::= <Pattern> '=' <Expression>
68      <Statement> ::= amount <Ids> '@' <Expression> <Quantity> <Allocation>
69      <Statement> ::= report <Reports> <Allocation>
70      <Statement> ::= if <Expression> then <Statements> <Else>
71      <Statement> ::= <Draw>
72      <Statement> ::= ';'
73      <Statement> ::= mix Id '=' <ExpressionSeq>
74      <Statement> ::= split <IdSeq> '=' <Expression> by <ExpressionSeq>
75      <Statement> ::= split <IdSeq> '=' <Expression>
76      <Statement> ::= dispose <ExpressionSeq>
77      <Statement> ::= regulate <IdSeq> '=' <ExpressionSeq> to <Expression> <Temperature>
78      <Statement> ::= regulate <IdSeq> to <Expression> <Temperature>
79      <Statement> ::= concentrate <IdSeq> '=' <ExpressionSeq> to <Expression> <Volume>
80      <Statement> ::= concentrate <IdSeq> to <Expression> <Volume>
81      <Statement> ::= equilibrate <IdSeq> '=' <ExpressionSeq> <EndCondition>
82      <Statement> ::= equilibrate <IdSeq> <EndCondition>
83      <Statement> ::= equilibrate <EndCondition>
84      <Net Instance> ::= Id '(' <Expressions> ')'
85      <Else> ::= elseif <Expression> then <Statements> <Else>
86      <Else> ::= else <Statements> end
87      <Else> ::= end
88      <Draw> ::= draw <Expression> from <Expression>
89      <Reaction> ::= <Transition>
90      <Reaction> ::= <Complex> '>>' <Transition>
91      <Transition> ::= <Complex> '->' <Complex>
92      <Transition> ::= <Complex> '->' '{' <Rate> '}' <Complex>
93      <Transition> ::= <Complex> '->' <Complex> '{' <Rate> '}'
94      <Transition> ::= <Complex> '<->' <Complex>
95      <Transition> ::= <Complex> '{' <Rate> '}' '<->' '{' <Rate> '}' <Complex>
96      <Transition> ::= <Complex> '<->' <Complex> '{' <Rate> '}' '{' <Rate> '}'
97      <Rate> ::= <Expression>
98      <Rate> ::= <Expression> ',' <Expression>
99      <Rate> ::= '{' <Expression> '}'
100     <Complex> ::= <Complex> '+' <Simplex>
101     <Complex> ::= <Simplex>
102     <Simplex> ::= Integer Id
103     <Simplex> ::= Id '*' Id
104     <Simplex> ::= Id
105     <Simplex> ::= '#'
106     <Simplex> ::= Ø
107     <Expression> ::= <Op Exp>
108     <Base Exp> ::= <Fun Instance>
109     <Base Exp> ::= true
110     <Base Exp> ::= false
111     <Base Exp> ::= Integer
112     <Base Exp> ::= Float
113     <Base Exp> ::= Double
114     <Base Exp> ::= QuotedString
115     <Base Exp> ::= if <Expression> then <Expression> <Else Exp>
116     <Base Exp> ::= fun <Fun>
117     <Base Exp> ::= λ <Fun>
118     <Base Exp> ::= net <Net>
119     <Base Exp> ::= η <Net>
120     <Base Exp> ::= rand <Rand>
121     <Base Exp> ::= '(' <Expression> ')'
122     <Base Exp> ::= '[' <Expressions> ']'
123     <Base Exp> ::= <Draw>
124     <Base Exp> ::= define <Statements> yield <Expression>
125     <Fun Instance> ::= Id
126     <Fun Instance> ::= <Fun Instance> '(' <Expressions> ')'
127     <Else Exp> ::= elseif <Expression> then <Expression> <Else Exp>
128     <Else Exp> ::= else <Expression> end
129     <Expressions> ::= <ExpressionSeq>
130     <Expressions> ::= 
131     <ExpressionSeq> ::= <ExpressionSeq> ',' <Expression>
132     <ExpressionSeq> ::= <Expression>
133     <Reports> ::= <Reports> ',' <Report>
134     <Reports> ::= <Report>
135     <Report> ::= Id '=' <Expression> as <Expression>
136     <Report> ::= Id '=' <Expression>
137     <Report> ::= <Expression> as <Expression>
138     <Report> ::= <Expression>
139     <EndCondition> ::= for <Expression>
140     <Op Exp> ::= <Op Exp> '|' <Or Exp>
141     <Op Exp> ::= <Or Exp>
142     <Or Exp> ::= <Or Exp> or <And Exp>
143     <Or Exp> ::= <And Exp>
144     <And Exp> ::= <And Exp> and <Not Exp>
145     <And Exp> ::= <Not Exp>
146     <Not Exp> ::= not <Comp Exp>
147     <Not Exp> ::= <Comp Exp>
148     <Comp Exp> ::= <Sum Exp> '=' <Sum Exp>
149     <Comp Exp> ::= <Sum Exp> '<>' <Sum Exp>
150     <Comp Exp> ::= <Sum Exp> '<=' <Sum Exp>
151     <Comp Exp> ::= <Sum Exp> '>=' <Sum Exp>
152     <Comp Exp> ::= <Sum Exp> '<' <Sum Exp>
153     <Comp Exp> ::= <Sum Exp> '>' <Sum Exp>
154     <Comp Exp> ::= <Sum Exp>
155     <Sum Exp> ::= <Sum Exp> '+' <Mult Exp>
156     <Sum Exp> ::= <Sum Exp> '-' <Mult Exp>
157     <Sum Exp> ::= <Mult Exp>
158     <Mult Exp> ::= <Mult Exp> '*' <Neg Exp>
159     <Mult Exp> ::= <Mult Exp> '/' <Neg Exp>
160     <Mult Exp> ::= <Neg Exp>
161     <Neg Exp> ::= '-' <Conc Exp>
162     <Neg Exp> ::= '∂' <Conc Exp>
163     <Neg Exp> ::= '<-' <Conc Exp>
164     <Neg Exp> ::= <Conc Exp>
165     <Conc Exp> ::= <Conc Exp> '++' <Powr Exp>
166     <Conc Exp> ::= <Powr Exp>
167     <Powr Exp> ::= <Powr Exp> '^' <Base Exp>
168     <Powr Exp> ::= <Base Exp>
169     <Volume> ::= Id
170     <Temperature> ::= Id
171     <Quantity> ::= Id


