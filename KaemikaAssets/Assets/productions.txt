============================================================
GOLD Parser Builder
Version 5.2.0.
============================================================


========================================
Grammar
========================================

"Name"    = Kaemika grammar
"Author"  = Luca Cardelli
"Version" = 1
"About"   = A Language for Modularizing Chemistry
          
"Case Sensitive" = True
"Start Symbol"   = <Top>

Id        = ({Letter}|{Greek and Coptic})({AlphaNumeric}|{Greek and Coptic}|'_'|{Superscripts and Subscripts}|'')*           ! Letter followed by alphanumerics or single-quote, underscore, Unicode sup/sub
Integer   = {Digit}+
Float     = {Digit}+ '.' {Digit}+
Double    = {Digit}+ ('.' {Digit}+)? [Ee] [+-]? {Digit}+
{StringChar} = {All Printable} - ["\]
QuotedString = '"' ({StringChar} | '\'{All Printable})* '"'
          
Comment Line  = '//'
Comment Start = '/*'
Comment End   = '*/'
Comment Block @= { Nesting = All }
                
! PREAMBLE --------------------------------------------

<Top>           ::=  <Statements>
             
! ABSTRACTIONS  --------------------------------------------
                          
<Function>       ::= Id '=' <Expression>                                     ! binding a function value to a function id
                    | Id <Fun>                                               ! function id definition
<Fun>            ::= <Headers> '{' <Expression> '}'                          ! function abstraction

<Network>        ::= Id '=' <Expression>                                     ! binding a network value to a network id
                    | Id <Net>                                               ! network id definition
<Net>            ::= <Header> '{' <Statements> '}'                           ! network abstraction (networks are nothing but functions that do not return values)

<Random>         ::= Id '=' <Expression>                                     ! binding a random variable value to a random variable id
                    | Id <Rand>                                              ! random variable id definition
<Rand>           ::= '(' 'omega' Id ')' '{' <Expression> '}'                 ! random variable abstraction
                  
<EmptySample>    ::= Id '{' <Expression> <Volume> ',' <Expression> <Temperature> '}'
<Sample>         ::= Id '=' <Expression>                                     ! binding a sample value to a sample id
                    | <EmptySample>                                          ! empty sample definition, parameterized by volume and temperature
                    | Id                                                     ! empty sample definition, default volume (1 mL) and temperature (20 Celsius)

<Species>        ::= Id '=' <Expression>                                     ! binding a species value to a species id
                    | '{' <Substances> '}'                                   ! declaration of multiple species (unallocated)
                    | <Substances> <Amount> <Allocation>                     ! allocation of multiple <Ids> species to a sample, 
                                                                             !     short for '{'<Substances>'}' ';' 'amount' <Ids> <Amount> <Allocation>

<Headers>        ::= <Headers> <Header>
                    | <Header>
                                      
<Header>         ::= '(' <Params> ')'

<Params>           ::= <ParamSeq>
                    |                                                  
<ParamSeq>         ::= <ParamSeq> ',' <Param>
                    | <Param>

<Param>          ::= 'bool' <Ids>                  ! booleans      
                    | 'number' <Ids>               ! numbers
                    | 'string' <Ids>               ! strings
                    | 'list' <Ids>                 ! lists
                    | 'flow' <Ids>                 ! flows                   
                    | 'species' <Ids>              ! species are values. n.b. individual reactions are not values, but networks are
                    | 'sample' <Ids>               ! samples are containers that have volume and temperature, populated with species that have concentrations
                    | 'function' <Ids>             ! functions can receive and return values, species, functions, and networks  
                    | 'network' <Ids>              ! networks can receive values, species, functions, and networks, and return nothing    
                    | 'random' <Ids>               ! random variables    
                    | 'value' <Ids>                ! untyped variables    
                    | <Ids>                        ! same as: 'value' <Ids>
                    | <Pattern>                    ! list pattern matching 

<Pattern>       ::= '[' <Params> ']'                  ! a fixed length list pattern
                    | '[' <Params> ']' '++' 'list' Id  ! a variable length list pattern, with tail on the right
                    | 'list' Id '++' '[' <Params> ']'  ! a variable length list pattern, with tail on the left

<Ids>           ::= <Ids> Id
                    | Id
                    
<IdSeq>         ::= <IdSeq> ',' Id
                    | Id
                                                              
<Allocation>     ::= 'in' <Expression>     ! allocation of species or reports to a sample
                    |                      ! short for 'in' 'vessel'
<Substances>     ::= <Substances> ',' <Substance>
                    | <Substance>
                                                             ! a species-basename is a string that is a legal Id, alpha-converted to avoid conflicts
<Substance>      ::= Id                                      ! same as: Id 'as' "Id" (species-basename "Id" is taken from variable-name Id)
                    | Id 'as' <Expression>                   ! variable-name 'as' species-basename (to adopt a non-default basename)
                    | Id '#' <Expression>                    ! same as: Id "#" <Expression> 'as' "Id"
                    | Id '#' <Expression> 'as' <Expression>  ! variable-name Id with molar mass 'as' species-basename
                    
<Amount>         ::= '@' <Expression> <Quantity>                    ! mean concentration
                    | '@' <Expression> '±' <Expression> <Quantity>  ! mean ± standard-deviation concentration
                  
! STATEMENTS --------------------------------------------

<Statements>    ::= <Statements> <Statement>  
                    |

<Statement>     ::=   <Net Instance>                          ! there are no obligatory delimiter characters between statements. LALR FTW!
                    | <Reaction>                              ! reactions are the only statements not prefixed by a keyword (other than instances)
                    | 'bool' Id '=' <Expression>              ! binding a bool value to a bool id
                    | 'number' Id '=' <Expression>            ! binding a number value to a number id
                    | 'string' Id '=' <Expression>            ! binding a string value to a string id
                    | 'list' Id '=' <Expression>              ! binding a list value to a list id
                    | 'flow' Id '=' <Expression>              ! binding a flow value to a flow id
                    | 'random' <Random>                       ! binding a random variable value to a random variable id
                    | 'constant' <IdSeq>                      ! an undetermined constant (used for exporting ODEs containing symbolic constants)
                    | 'parameter' Id '<-' <Expression>        ! drawing a parameter from a random variable (and displaying it in the GUI)
                    | 'species' <Species>                     ! binding a species to a species id or species def
                    | 'sample' <Sample>                       ! binding a sample to a sample id or sample def
                    | 'function' <Function>                   ! binding a function to a function id or function def
                    | 'network' <Network>                     ! binding a network to a network id or network def
                    | 'value' Id '=' <Expression>             ! binding any value to an id (useful in polymorphic functions)
                    | <Pattern> '=' <Expression>              ! binding list elements to ids; length and types must match                  
                    | 'amount' <Ids> <Amount> <Allocation>    ! set initial quantity of species in a sample
                    | 'trigger' <Ids> <Amount> 'when' <Expression> <Allocation>! trigger event the first time that a condition becomes true
                    | 'report' <Reports> <Allocation>                          ! report species for plotting (can use arithmetic, but restrictions apply)
                    | 'if' <Expression> 'then' <Statements> <Else>             ! conditional
                    | <Draw>                                                   ! draw samples from (lists of) functions or random variables and plot them
                    | ';'                                                      ! rarely used optional syntactic noise for same-line multiple statements
                    
                    | 'mix' Id '=' <ExpressionSeq>                                ! mix samples and name the new sample
                    | 'split' <IdSeq> '=' <Expression> 'by' <ExpressionSeq>       ! split a sample by propotions and name them
                    | 'split' <IdSeq> '=' <Expression>                            ! split in equal parts
                    | 'dispose' <ExpressionSeq>                                   ! dispose samples (those samples cannot be reused)
                    | 'regulate' <IdSeq> '=' <ExpressionSeq> 'to' <Expression> <Temperature>  ! change samples temperature to value (heat or cool)
                    | 'regulate' <IdSeq> 'to' <Expression> <Temperature>                      ! short for 'regulate' Ids '=' Ids 'to' ...
                    | 'concentrate' <IdSeq> '=' <ExpressionSeq> 'to' <Expression> <Volume>    ! change samples volume to value (evaporate or dilute)
                    | 'concentrate' <IdSeq> 'to' <Expression> <Volume>                        ! short for 'concentrate' Ids '=' Ids 'to' ...
                    | 'equilibrate' <IdSeq> '=' <ExpressionSeq> <EndCondition>    ! integrate samples for a time, and name the new samples
                    | 'equilibrate' <IdSeq> <EndCondition>                        ! short for 'equilibrate' Ids '=' Ids <EndCondition> (reusing the sample Ids)
                    | 'equilibrate' <EndCondition>                                ! short for 'equilibrate' 'vessel' '=' 'vessel' <EndCondition> (default sample)
                
<Net Instance>   ::= Id '(' <Expressions> ')'

<Else>           ::=  'elseif' <Expression> 'then' <Statements> <Else>  ! cascading if statements: else is optional
                    | 'else' <Statements> 'end'
                    | 'end'

<Draw>          ::= 'draw' <Expression> 'from' <Expression>
                                   
! REACTIONS --------------------------------------------

<Reaction>      ::= <Transition> 
                    | '∂' Id '=' <Expression>                     ! ODE; short for the reaction Ø -> Id {{<Expression>}}
                    | <Complex> '>>' <Transition>                 ! optional catalysis notation, A >> B -> C == A + B -> A + C, etc.
               
<Transition>    ::= <Complex> '->' <Complex>                                              ! default rate (collision frequncy = 1.0, activation energy = 0.0)
                    | <Complex> '->' '{' <Rate> '}' <Complex>                             ! rate in the middle of reaction
                    | <Complex> '->' <Complex> '{' <Rate> '}'                             ! or rate after reaction
                    | <Complex> '<->' <Complex>                                           ! reversible, default rate (= 1.0, 0.0)
                    | <Complex> '{' <Rate> '}' '<->' '{' <Rate> '}' <Complex>             ! rate in the middle of reaction
                    | <Complex> '<->' <Complex> '{' <Rate> '}' '{' <Rate> '}'             ! or rate after reaction, {reverse} then {direct}

<Rate>          ::= <Expression>                                                          ! collision frequency (with activation energy = 0.0)
                    | <Expression> ',' <Expression>                                       ! collision frequency, activation energy (joules per mole)
                    | '{' <Expression> '}'                                                ! arbitrary kinetic law: any function from a sample to a non-negative number

<Complex>       ::= <Complex> '+' <Simplex>
                    | <Simplex>
                
<Simplex>       ::= Integer <Compound>                                  ! stoichiometry: '2a' is the same as 'a + a'
                    | Id '*' <Compound> | Id '·' <Compound>             ! stoichiometry: 'n * a' is the same as 'a + ... + a' n times for integer n>=0
                    | <Compound>                                        ! a species
                    | '#' | 'Ø'                                         ! zero species: for creation and degradation
                    
<Compound>      ::= Id                                                  ! a mass action substance 'a' has rate contribution 'a'
                    | Id 'act' <Hill>                                   ! a Hill activator: 'a act(k,n)' has rate contribution 'a^n/(a^n+k^n)' and is catalytic
                    | Id 'inh' <Hill>                                   ! a Hill inhibitor: 'a inh(k,n)' has rate contribution 'k^n/(a^n+k^n)' and is catalytic
                    | Id 'deg' 'act' <Hill>                             ! a Hill degrading activator: 'a deg act' has rate contribution 'a^n/(a^n+k^n)' and is non catalytic
                    | Id 'deg' 'inh' <Hill>                             ! a Hill degrading inhibitor: 'a deg inh' has rate contribution 'k^n/(a^n+k^n)' and is non catalytic
                    
<Hill>          ::= '(' <Expression> ')'                                ! Hill microscopic dissociation constant k (actually k can be any expression), and Hill default coefficient n = 1
                    | '(' <Expression> ',' <Expression> ')'             ! Hill microscopic dissociation constant k, and Hill coefficient n
                    |                                                   ! Hill default microscopic dissociation constant k = 1, and Hill default coefficient n = 1

! EXPRESSIONS --------------------------------------------
          
<Expression>    ::=  <Op Exp>                                               ! see below
                 
<Base Exp>      ::= <Fun Instance> 
                    | 'true' | 'false'                                      ! bool literal
                    | Integer | Float | Double                              ! double floating point literal. use int(n) to round to integers
                    | QuotedString                                          ! double-quoted string literal. use \" and \\ to represent " and \
                    | 'if' <Expression> 'then' <Expression> <Else Exp>      ! no statements allowed inside if-expressions: uses if-statements for that
                    | 'fun' <Fun> | 'λ' <Fun>                               ! function abstraction
                    | 'net' <Net> | 'η' <Net>                               ! network abstraction
                    | 'rand' <Rand>                                         ! random variable abstraction
                    | '(' <Expression> ')'                                  ! parenthesized expression
                    | '[' <Expressions> ']'                                 ! list
                    | <Draw>                                                ! draw a list from (lists of) functions or random variables
                    | 'define' <Statements> 'yield' <Expression>            ! ambigous syntax because of no 'end' bracket. 
                                                                            ! E.g. (define number n = 3 yield n) + 3   vs. define number n = 3 yield (n + 3)
                                                                            ! is resolved as the latter
                  
<Fun Instance>      ::= Id                                                  ! built-in math library operators, and pi and e, follow this syntax too
                    | <Fun Instance> '(' <Expressions> ')'                  ! function invocations can use currying             
                     
<Else Exp>       ::=  'elseif' <Expression> 'then' <Expression> <Else Exp>  ! cascading if expressions: else is compulsory
                    | 'else' <Expression> 'end'
                           
<Expressions>    ::= <ExpressionSeq>
                    |
<ExpressionSeq>  ::= <ExpressionSeq> ',' <Expression>
                    | <Expression>
                                        
<Reports>        ::= <Reports> ',' <Report>
                    | <Report>
                    
<Report>         ::=  Id '=' <Expression> 'as' <Expression>                  ! use the string after 'as' in legends as the name of this report
                    | Id '=' <Expression>                                    ! bind a flow-valued timecourse from this report to Id
                    | <Expression> 'as' <Expression>                         ! use the string after 'as' in legends as the name of this report
                    | <Expression>                                           ! a flow to plot

<EndCondition>   ::= 'for' <Expression>
                  
! OPERATORS  --------------------------------------------                                 

<Op Exp>        ::= <Op Exp> '|' <Or Exp>                                 ! boring encoding of prefix/infix operator precedence  
                    | <Or Exp>

<Or Exp>        ::=  <Or Exp> 'or' <And Exp>       
                    | <And Exp> 

<And Exp>       ::=  <And Exp> 'and' <Not Exp>                                          
                    | <Not Exp>                                          

<Not Exp>       ::= 'not' <Comp Exp>                                          
                    | <Comp Exp>  

<Comp Exp>      ::= <Sum Exp> '=' <Sum Exp>
                    | <Sum Exp> '<>' <Sum Exp>
                    | <Sum Exp> '<=' <Sum Exp>
                    | <Sum Exp> '>=' <Sum Exp>
                    | <Sum Exp> '<' <Sum Exp>
                    | <Sum Exp> '>' <Sum Exp>
                    | <Sum Exp>

<Sum Exp>       ::= <Sum Exp> '+' <Mult Exp>
                    | <Sum Exp> '-' <Mult Exp>                                          
                    | <Mult Exp> 

<Mult Exp>      ::= <Mult Exp> '*' <Neg Exp> 
                    | <Mult Exp> '·' <Neg Exp>                 ! alternative to '*'                          
                    | <Mult Exp> '/' <Neg Exp>                                           
                    | <Neg Exp> 

<Neg Exp>       ::= '-' <Conc Exp> 
                    | '∂' <Conc Exp>
                    | '<-' <Conc Exp>
                    | <Conc Exp>
                    
<Conc Exp>      ::= <Conc Exp> '++' <Powr Exp>
                    | <Powr Exp>
                    
<Powr Exp>      ::= <Powr Exp> '^' <Base Exp>                               ! -2^2 = -4;  -2^-2 is error, use -2^(-2)
                    | <Base Exp>

! UNITS  --------------------------------------------                                 

<Volume>        ::= Id     ! 'L' | 'mL' | 'uL' | 'μL' | 'nL'  | 'pL' | 'ml' | 'ul' | 'μl' | 'nl' | 'pl'
<Temperature>   ::= Id     ! 'K' | 'Kelvin' | 'C' | 'Celsius'
<Quantity>      ::= Id     ! 'kg' | 'g' | 'mg' | 'ug' | 'μg' | 'ng' | 'pg' | 'kM' | 'M' | 'mM' | 'uM' | 'μM' | 'nM' | 'pM' | 'kmol' | 'mol' | 'mmol' | 'umol' | 'μmol' | 'nmol' | 'pmol'




========================================
Grammar Properties
========================================

Name                Kaemika grammar
Author              Luca Cardelli
Version             1
About               A Language for Modularizing Chemistry
Case Sensitive      True
Start Symbol        Top
Auto Whitespace     True
Character Mapping   Windows-1252
Character Set       Unicode
Generated By        GOLD Parser Builder 5.2.0.
Generated Date      2020-11-18 09:20


========================================
Defined Sets
========================================

{StringChar}     &20, &21, &23 .. &5B, &5D .. &80, &82 .. &8C, &8E, &91 .. &9C, &9E .. &200A, &2010 .. &2027, &202F .. &205F, &2065 .. &2069, &2070 .. &D7FF, &E000 .. &FEFE, &FF00 .. &FFEF


========================================
Lexical Groups
========================================

0    Comment Line
1    Comment Block




========================================
Terminals
========================================

 0      (EOF)
 1      (Error)
 2      Comment
 3      NewLine
 4      Whitespace
 5      '*/'
 6      '/*'
 7      '//'
 8      '-'
 9      '#'
 10     '('
 11     ')'
 12     '*'
 13     ','
 14     '/'
 15     ';'
 16     '@'
 17     '['
 18     ']'
 19     '^'
 20     '{'
 21     '|'
 22     '}'
 23     '+'
 24     '++'
 25     '<'
 26     '<-'
 27     '<='
 28     '<>'
 29     '<->'
 30     '='
 31     '>'
 32     '->'
 33     '>='
 34     '>>'
 35     '±'
 36     '∂'
 37     '·'
 38     act
 39     amount
 40     and
 41     as
 42     bool
 43     by
 44     concentrate
 45     constant
 46     define
 47     deg
 48     dispose
 49     Double
 50     draw
 51     else
 52     elseif
 53     end
 54     equilibrate
 55     false
 56     Float
 57     flow
 58     for
 59     from
 60     fun
 61     function
 62     Id
 63     if
 64     in
 65     inh
 66     Integer
 67     list
 68     mix
 69     net
 70     network
 71     not
 72     number
 73     Ø
 74     omega
 75     or
 76     parameter
 77     QuotedString
 78     rand
 79     random
 80     regulate
 81     report
 82     sample
 83     species
 84     split
 85     string
 86     then
 87     to
 88     trigger
 89     true
 90     value
 91     when
 92     yield
 93     η
 94     λ


========================================
Nonterminals
========================================

95      <Allocation>
96      <Amount>
97      <And Exp>
98      <Base Exp>
99      <Comp Exp>
100     <Complex>
101     <Compound>
102     <Conc Exp>
103     <Draw>
104     <Else>
105     <Else Exp>
106     <EmptySample>
107     <EndCondition>
108     <Expression>
109     <Expressions>
110     <ExpressionSeq>
111     <Fun>
112     <Fun Instance>
113     <Function>
114     <Header>
115     <Headers>
116     <Hill>
117     <Ids>
118     <IdSeq>
119     <Mult Exp>
120     <Neg Exp>
121     <Net>
122     <Net Instance>
123     <Network>
124     <Not Exp>
125     <Op Exp>
126     <Or Exp>
127     <Param>
128     <Params>
129     <ParamSeq>
130     <Pattern>
131     <Powr Exp>
132     <Quantity>
133     <Rand>
134     <Random>
135     <Rate>
136     <Reaction>
137     <Report>
138     <Reports>
139     <Sample>
140     <Simplex>
141     <Species>
142     <Statement>
143     <Statements>
144     <Substance>
145     <Substances>
146     <Sum Exp>
147     <Temperature>
148     <Top>
149     <Transition>
150     <Volume>


========================================
Rules
========================================

0       <Top> ::= <Statements>
1       <Function> ::= Id '=' <Expression>
2       <Function> ::= Id <Fun>
3       <Fun> ::= <Headers> '{' <Expression> '}'
4       <Network> ::= Id '=' <Expression>
5       <Network> ::= Id <Net>
6       <Net> ::= <Header> '{' <Statements> '}'
7       <Random> ::= Id '=' <Expression>
8       <Random> ::= Id <Rand>
9       <Rand> ::= '(' omega Id ')' '{' <Expression> '}'
10      <EmptySample> ::= Id '{' <Expression> <Volume> ',' <Expression> <Temperature> '}'
11      <Sample> ::= Id '=' <Expression>
12      <Sample> ::= <EmptySample>
13      <Sample> ::= Id
14      <Species> ::= Id '=' <Expression>
15      <Species> ::= '{' <Substances> '}'
16      <Species> ::= <Substances> <Amount> <Allocation>
17      <Headers> ::= <Headers> <Header>
18      <Headers> ::= <Header>
19      <Header> ::= '(' <Params> ')'
20      <Params> ::= <ParamSeq>
21      <Params> ::= 
22      <ParamSeq> ::= <ParamSeq> ',' <Param>
23      <ParamSeq> ::= <Param>
24      <Param> ::= bool <Ids>
25      <Param> ::= number <Ids>
26      <Param> ::= string <Ids>
27      <Param> ::= list <Ids>
28      <Param> ::= flow <Ids>
29      <Param> ::= species <Ids>
30      <Param> ::= sample <Ids>
31      <Param> ::= function <Ids>
32      <Param> ::= network <Ids>
33      <Param> ::= random <Ids>
34      <Param> ::= value <Ids>
35      <Param> ::= <Ids>
36      <Param> ::= <Pattern>
37      <Pattern> ::= '[' <Params> ']'
38      <Pattern> ::= '[' <Params> ']' '++' list Id
39      <Pattern> ::= list Id '++' '[' <Params> ']'
40      <Ids> ::= <Ids> Id
41      <Ids> ::= Id
42      <IdSeq> ::= <IdSeq> ',' Id
43      <IdSeq> ::= Id
44      <Allocation> ::= in <Expression>
45      <Allocation> ::= 
46      <Substances> ::= <Substances> ',' <Substance>
47      <Substances> ::= <Substance>
48      <Substance> ::= Id
49      <Substance> ::= Id as <Expression>
50      <Substance> ::= Id '#' <Expression>
51      <Substance> ::= Id '#' <Expression> as <Expression>
52      <Amount> ::= '@' <Expression> <Quantity>
53      <Amount> ::= '@' <Expression> '±' <Expression> <Quantity>
54      <Statements> ::= <Statements> <Statement>
55      <Statements> ::= 
56      <Statement> ::= <Net Instance>
57      <Statement> ::= <Reaction>
58      <Statement> ::= bool Id '=' <Expression>
59      <Statement> ::= number Id '=' <Expression>
60      <Statement> ::= string Id '=' <Expression>
61      <Statement> ::= list Id '=' <Expression>
62      <Statement> ::= flow Id '=' <Expression>
63      <Statement> ::= random <Random>
64      <Statement> ::= constant <IdSeq>
65      <Statement> ::= parameter Id '<-' <Expression>
66      <Statement> ::= species <Species>
67      <Statement> ::= sample <Sample>
68      <Statement> ::= function <Function>
69      <Statement> ::= network <Network>
70      <Statement> ::= value Id '=' <Expression>
71      <Statement> ::= <Pattern> '=' <Expression>
72      <Statement> ::= amount <Ids> <Amount> <Allocation>
73      <Statement> ::= trigger <Ids> <Amount> when <Expression> <Allocation>
74      <Statement> ::= report <Reports> <Allocation>
75      <Statement> ::= if <Expression> then <Statements> <Else>
76      <Statement> ::= <Draw>
77      <Statement> ::= ';'
78      <Statement> ::= mix Id '=' <ExpressionSeq>
79      <Statement> ::= split <IdSeq> '=' <Expression> by <ExpressionSeq>
80      <Statement> ::= split <IdSeq> '=' <Expression>
81      <Statement> ::= dispose <ExpressionSeq>
82      <Statement> ::= regulate <IdSeq> '=' <ExpressionSeq> to <Expression> <Temperature>
83      <Statement> ::= regulate <IdSeq> to <Expression> <Temperature>
84      <Statement> ::= concentrate <IdSeq> '=' <ExpressionSeq> to <Expression> <Volume>
85      <Statement> ::= concentrate <IdSeq> to <Expression> <Volume>
86      <Statement> ::= equilibrate <IdSeq> '=' <ExpressionSeq> <EndCondition>
87      <Statement> ::= equilibrate <IdSeq> <EndCondition>
88      <Statement> ::= equilibrate <EndCondition>
89      <Net Instance> ::= Id '(' <Expressions> ')'
90      <Else> ::= elseif <Expression> then <Statements> <Else>
91      <Else> ::= else <Statements> end
92      <Else> ::= end
93      <Draw> ::= draw <Expression> from <Expression>
94      <Reaction> ::= <Transition>
95      <Reaction> ::= '∂' Id '=' <Expression>
96      <Reaction> ::= <Complex> '>>' <Transition>
97      <Transition> ::= <Complex> '->' <Complex>
98      <Transition> ::= <Complex> '->' '{' <Rate> '}' <Complex>
99      <Transition> ::= <Complex> '->' <Complex> '{' <Rate> '}'
100     <Transition> ::= <Complex> '<->' <Complex>
101     <Transition> ::= <Complex> '{' <Rate> '}' '<->' '{' <Rate> '}' <Complex>
102     <Transition> ::= <Complex> '<->' <Complex> '{' <Rate> '}' '{' <Rate> '}'
103     <Rate> ::= <Expression>
104     <Rate> ::= <Expression> ',' <Expression>
105     <Rate> ::= '{' <Expression> '}'
106     <Complex> ::= <Complex> '+' <Simplex>
107     <Complex> ::= <Simplex>
108     <Simplex> ::= Integer <Compound>
109     <Simplex> ::= Id '*' <Compound>
110     <Simplex> ::= Id '·' <Compound>
111     <Simplex> ::= <Compound>
112     <Simplex> ::= '#'
113     <Simplex> ::= Ø
114     <Compound> ::= Id
115     <Compound> ::= Id act <Hill>
116     <Compound> ::= Id inh <Hill>
117     <Compound> ::= Id deg act <Hill>
118     <Compound> ::= Id deg inh <Hill>
119     <Hill> ::= '(' <Expression> ')'
120     <Hill> ::= '(' <Expression> ',' <Expression> ')'
121     <Hill> ::= 
122     <Expression> ::= <Op Exp>
123     <Base Exp> ::= <Fun Instance>
124     <Base Exp> ::= true
125     <Base Exp> ::= false
126     <Base Exp> ::= Integer
127     <Base Exp> ::= Float
128     <Base Exp> ::= Double
129     <Base Exp> ::= QuotedString
130     <Base Exp> ::= if <Expression> then <Expression> <Else Exp>
131     <Base Exp> ::= fun <Fun>
132     <Base Exp> ::= λ <Fun>
133     <Base Exp> ::= net <Net>
134     <Base Exp> ::= η <Net>
135     <Base Exp> ::= rand <Rand>
136     <Base Exp> ::= '(' <Expression> ')'
137     <Base Exp> ::= '[' <Expressions> ']'
138     <Base Exp> ::= <Draw>
139     <Base Exp> ::= define <Statements> yield <Expression>
140     <Fun Instance> ::= Id
141     <Fun Instance> ::= <Fun Instance> '(' <Expressions> ')'
142     <Else Exp> ::= elseif <Expression> then <Expression> <Else Exp>
143     <Else Exp> ::= else <Expression> end
144     <Expressions> ::= <ExpressionSeq>
145     <Expressions> ::= 
146     <ExpressionSeq> ::= <ExpressionSeq> ',' <Expression>
147     <ExpressionSeq> ::= <Expression>
148     <Reports> ::= <Reports> ',' <Report>
149     <Reports> ::= <Report>
150     <Report> ::= Id '=' <Expression> as <Expression>
151     <Report> ::= Id '=' <Expression>
152     <Report> ::= <Expression> as <Expression>
153     <Report> ::= <Expression>
154     <EndCondition> ::= for <Expression>
155     <Op Exp> ::= <Op Exp> '|' <Or Exp>
156     <Op Exp> ::= <Or Exp>
157     <Or Exp> ::= <Or Exp> or <And Exp>
158     <Or Exp> ::= <And Exp>
159     <And Exp> ::= <And Exp> and <Not Exp>
160     <And Exp> ::= <Not Exp>
161     <Not Exp> ::= not <Comp Exp>
162     <Not Exp> ::= <Comp Exp>
163     <Comp Exp> ::= <Sum Exp> '=' <Sum Exp>
164     <Comp Exp> ::= <Sum Exp> '<>' <Sum Exp>
165     <Comp Exp> ::= <Sum Exp> '<=' <Sum Exp>
166     <Comp Exp> ::= <Sum Exp> '>=' <Sum Exp>
167     <Comp Exp> ::= <Sum Exp> '<' <Sum Exp>
168     <Comp Exp> ::= <Sum Exp> '>' <Sum Exp>
169     <Comp Exp> ::= <Sum Exp>
170     <Sum Exp> ::= <Sum Exp> '+' <Mult Exp>
171     <Sum Exp> ::= <Sum Exp> '-' <Mult Exp>
172     <Sum Exp> ::= <Mult Exp>
173     <Mult Exp> ::= <Mult Exp> '*' <Neg Exp>
174     <Mult Exp> ::= <Mult Exp> '·' <Neg Exp>
175     <Mult Exp> ::= <Mult Exp> '/' <Neg Exp>
176     <Mult Exp> ::= <Neg Exp>
177     <Neg Exp> ::= '-' <Conc Exp>
178     <Neg Exp> ::= '∂' <Conc Exp>
179     <Neg Exp> ::= '<-' <Conc Exp>
180     <Neg Exp> ::= <Conc Exp>
181     <Conc Exp> ::= <Conc Exp> '++' <Powr Exp>
182     <Conc Exp> ::= <Powr Exp>
183     <Powr Exp> ::= <Powr Exp> '^' <Base Exp>
184     <Powr Exp> ::= <Base Exp>
185     <Volume> ::= Id
186     <Temperature> ::= Id
187     <Quantity> ::= Id


