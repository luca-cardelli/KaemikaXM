//======================================
// PID Controller
//======================================

number precision = 10

network PBlock (species E⁺ E⁻ P⁺ P⁻,  number Kp) {
       E⁺ -> E⁺ + P⁺                    {precision * Kp}
       E⁻ -> E⁻ + P⁻                    {precision * Kp}
       P⁺ -> #                          {precision} 
       P⁻ -> #                          {precision} 
       P⁻ + P⁺ -> #                     {precision}
}

network IBlock (species E⁺ E⁻ I⁺ I⁻, number Ki) {
       E⁺ -> E⁺ + I⁺            {Ki}
       E⁻ -> E⁻ + I⁻            {Ki}
       I⁻ + I⁺ -> #             {precision}
}

network DBlock(species E⁺ E⁻ D⁺ D⁻, number Kd) {
       species A⁺, A⁻ @ 0M  // D block auxiliary species
       E⁺->E⁺ + A⁺         {precision}
       A⁺ ->#             {precision}
       E⁻ ->E⁻ + A⁻        {precision}
       A⁻ ->#             {precision}
       E⁺ ->E⁺ + D⁺        {precision*precision*Kd}
       A⁻ ->A⁻ + D⁺        {precision*precision*Kd}
       D⁺ -> #            {precision}
       E⁻ -> E⁻ + D⁻       {precision*precision*Kd}
       A⁺ -> A⁺ + D⁻       {precision*precision*Kd}
       D⁻ -> #            {precision}
       D⁺ + D⁻ -> #       {precision}
}

network SumBlock(species P⁺ P⁻ I⁺ I⁻ D⁺ D⁻ U⁺ U⁻) {
      P⁺ -> P⁺ + U⁺                       {1}
      P⁻ -> P⁻  + U⁻                    {1}
      I⁺ -> I⁺ + U⁺                       {1}
      I⁻ -> I⁻  + U⁻                    {1}
      D⁺ -> D⁺ + U⁺                      {1}
      D⁻ -> D⁻  + U⁻                     {1}
      U⁺ -> #              {1}
      U⁻ -> #              {1}
      U⁺ + U⁻ -> #         {1}
}

network SubBlock (species A⁺ A⁻ B⁺ B⁻ E⁺ E⁻) {
       A⁺ -> A⁺ + E⁺        {1}
       A⁻ -> A⁻ + E⁻        {1}
       B⁻ -> B⁻ + E⁺      {1}
       B⁺  -> B⁺ + E⁻    {1}
       E⁺ -> #             {1}
       E⁻ -> #             {1}
       E⁺ + E⁻-> #         {1}
}

network DualRail (species A A⁺ A⁻) {
       A -> A + A⁺ 
       A⁺ -> #
       A⁺ + A⁻ -> #
}


network PIDController(
   species R⁺ R⁻ Y,
   number Kp Ki Kd,
   network Plant){

   species E⁺,E⁻,P⁺,P⁻,I⁺,I⁻,D⁺,D⁻,U⁺,U⁻,Y⁺,Y⁻ @ 0M

   PBlock(E⁺, E⁻, P⁺, P⁻, Kp) 
   IBlock(E⁺, E⁻, I⁺, I⁻, Ki)
   DBlock(E⁺, E⁻, D⁺, D⁻, Kd)
   SumBlock(P⁺, P⁻, I⁺, I⁻, D⁺, D⁻, U⁺, U⁻)
   Plant(U⁺, U⁻, Y)
   DualRail(Y, Y⁺, Y⁻)
   SubBlock(R⁺, R⁻, Y⁺, Y⁻, E⁺, E⁻)
}

network Plant(species U⁺ U⁻ Y) {
   U⁺ -> U⁺ + Y
   U⁻ + Y -> U⁻
}

// Input waveform
network DSignal(species X⁺ X⁻, function f) {
   number precision = 100
   # ->{{precision*pos(f())}} X⁺;   X⁺ ->{precision} #
   # ->{{precision*pos(-f())}} X⁻;  X⁻ ->{precision } #
}

species R⁺, R⁻, Y @ 0M

/*  
// CONSTANT REFEFENCE
 DSignal(R⁺,R⁻, fun(){3})
 PIDController(R⁺,R⁻, Y, 0.1, 0.02, 0.02, Plant)
 //PIDController(R⁺,R⁻, Y, 0.1889, 0.07987, 0.08625, Plant) // found by argmin optimization
 //PIDController(R⁺,R⁻, Y, 0.1412, 0.0566, 0.04966, Plant) // found by argmin optimization
 report R⁺ - R⁻, Y
 equilibrate for 40
// END CONSTANT REFEFENCE
*/

/* */
// OSCILLATING REFERENCE
number Kp =? uniform(0,2)
number Ki =? uniform(0,2)
number Kd =? uniform(0,2)

DSignal(R⁺,R⁻, fun(){1.5+sin(0.25*time)})
PIDController(R⁺,R⁻, Y, pos(Kp), pos(Ki), pos(Kd), Plant)
//PIDController(R⁺,R⁻, Y, 0.8, 0.2, 0.06, Plant)

report R⁺ - R⁻, Y
equilibrate for 75
// END OSCILLATING REFERENCE

